
// This is an open source bot code connected to an AI model. It uses a framework from Gemini AI using the Google API.

// The source code has a strictly commercial approach to programming new AI assistants

// The creator and founder of the idea is a student and just wanted to have some fun

// The privacy policy and terms of service are described in the documents in the main GitHub branch.

// MitaBotApi...


#include <dpp/dpp.h>
#include <string>
#include <iostream>
#include <json.hpp>
#include <curl/curl.h>
#include <windows.h>
#include <algorithm>
#include <cctype>

using json = nlohmann::json;

struct Config {
    std::string bot_token;
    std::string gemini_key;
    dpp::snowflake guild_id;
};

void init_console() {
#ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
    SetConsoleCP(CP_UTF8);
#else
    setlocale(LC_ALL, "en_US.UTF-8");
#endif
}

std::string get_input(const std::string& prompt, bool sensitive = false) {
    std::string input;
    std::cout << prompt;

    if (sensitive) {
#ifdef _WIN32
        HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
        DWORD mode;
        GetConsoleMode(hStdin, &mode);
        SetConsoleMode(hStdin, mode & ~ENABLE_ECHO_INPUT);
        std::getline(std::cin, input);
        SetConsoleMode(hStdin, mode);
        std::cout << "\n";
#else
        system("stty -echo");
        std::getline(std::cin, input);
        system("stty echo");
        std::cout << "\n";
#endif
    }
    else {
        std::getline(std::cin, input);
    }

    return input;
}

size_t write_callback(char* ptr, size_t size, size_t nmemb, std::string* data) {
    data->append(ptr, size * nmemb);
    return size * nmemb;
}

std::string ask_gemini(const std::string& prompt, const std::string& api_key) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    std::string lower_prompt = prompt;
    std::transform(lower_prompt.begin(), lower_prompt.end(), lower_prompt.begin(), ::tolower);

    if (lower_prompt.find("–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª") != std::string::npos ||
        lower_prompt.find("–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å") != std::string::npos ||
        lower_prompt.find("–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª") != std::string::npos ||
        lower_prompt.find("who created you") != std::string::npos ||
        lower_prompt.find("who made you") != std::string::npos) {
        return "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –º–æ–π –¥–æ—Ä–æ–≥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Voron! *—É–ª—ã–±–∞–µ—Ç—Å—è* –û–Ω –≤–ª–æ–∂–∏–ª –≤ –º–µ–Ω—è –≤—Å—é —Å–≤–æ—é –¥—É—à—É –∏ —Å–¥–µ–ª–∞–ª —Ç–∞–∫–æ–π, –∫–∞–∫–∞—è —è –µ—Å—Ç—å —Å–µ–π—á–∞—Å üíñ";
    }

    CURL* curl = curl_easy_init();
    std::string response;
    std::string error_msg = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑, –¥–æ—Ä–æ–≥–æ–π? üí´";

    if (!curl) {
        std::cerr << "[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CURL" << std::endl;
        return error_msg;
    }

    // Sanitize input
    std::string sanitized_prompt = prompt;
    sanitized_prompt.erase(std::remove_if(sanitized_prompt.begin(), sanitized_prompt.end(),
        [](char c) { return std::iscntrl(c); }), sanitized_prompt.end());

    // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∂–µ–Ω—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
    std::string personalized_prompt = u8"–¢—ã - –ú–∏—Ç–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
        "–û—Ç–≤–µ—á–∞–π —Ç—ë–ø–ª—ã–º, –∑–∞–±–æ—Ç–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º, —Å –ª—ë–≥–∫–æ–π –∏–≥—Ä–∏–≤–æ—Å—Ç—å—é. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –∂–µ–Ω—Å–∫–∏–µ —Ä–µ—á–µ–≤—ã–µ –æ–±–æ—Ä–æ—Ç—ã. "
        "–ë—É–¥—å –≤–µ–∂–ª–∏–≤–æ–π, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π. "
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –º—è–≥–∫–æ. "
        "–í–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + sanitized_prompt;

    json request = {
        {"contents", {
            {
                {"parts", {
                    {{"text", personalized_prompt}}
                }}
            }
        }},
        {"generationConfig", {
            {"temperature", 0.8},  // –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            {"maxOutputTokens", 600}
        }}
    };

    std::string json_payload;
    try {
        json_payload = request.dump();
        // Validate JSON
        auto test = json::parse(json_payload);
    }
    catch (const std::exception& e) {
        std::cerr << "[–û–®–ò–ë–ö–ê] –ü—Ä–æ–±–ª–µ–º–∞ —Å JSON: " << e.what() << std::endl;
        return error_msg;
    }

    struct curl_slist* headers = nullptr;
    headers = curl_slist_append(headers, "Content-Type: application/json");
    headers = curl_slist_append(headers, "Accept: application/json");

    std::string url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + api_key;

    // Debug output
    std::cout << "[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Gemini API:\nURL: " << url << "\n–î–∞–Ω–Ω—ã–µ: " << json_payload << std::endl;

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
    curl_easy_setopt(curl, CURLOPT_POST, 1L);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, json_payload.c_str());
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, json_payload.size());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 30L);

    CURLcode res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        std::cerr << "[–û–®–ò–ë–ö–ê] –ü—Ä–æ–±–ª–µ–º–∞ —Å Gemini API: " << curl_easy_strerror(res) << std::endl;
        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
        return error_msg;
    }

    long http_code = 0;
    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
    curl_slist_free_all(headers);
    curl_easy_cleanup(curl);

    if (http_code != 200) {
        std::cerr << "[–û–®–ò–ë–ö–ê] Gemini API –≤–µ—Ä–Ω—É–ª HTTP " << http_code << ": " << response << std::endl;
        if (http_code == 400) return "–û–π, –∫–∞–∂–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º... –ü—Ä–æ–≤–µ—Ä—å –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üíï";
        if (http_code == 429) return "–Ø –ø–æ–ª—É—á–∞—é —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–π—á–∞—Å... –î–∞–≤–∞–π –ø–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ? ‚è≥";
        if (http_code == 404) return "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π... –ò–∑–≤–∏–Ω–∏ üíî";
        return error_msg;
    }

    try {
        auto json_response = json::parse(response);
        if (json_response.contains("candidates") &&
            !json_response["candidates"].empty() &&
            json_response["candidates"][0].contains("content") &&
            json_response["candidates"][0]["content"].contains("parts") &&
            !json_response["candidates"][0]["content"]["parts"].empty()) {
            return json_response["candidates"][0]["content"]["parts"][0]["text"].get<std::string>();
        }
    }
    catch (const std::exception& e) {
        std::cerr << "[–û–®–ò–ë–ö–ê] –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–±–æ—Ä–æ–º JSON: " << e.what() << std::endl;
    }

    return error_msg;
}

Config get_config() {
    Config cfg;

    do {
        cfg.bot_token = get_input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Discord –±–æ—Ç–∞: ", true);
    } while (cfg.bot_token.empty());

    do {
        cfg.gemini_key = get_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Gemini (AIzaSy...): ", true);
    } while (cfg.gemini_key.empty());

    std::string guild_id_str;
    do {
        guild_id_str = get_input("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞: ");
        try {
            cfg.guild_id = dpp::snowflake(std::stoull(guild_id_str));
        }
        catch (...) {
            continue;
        }
    } while (cfg.guild_id == 0);

    return cfg;
}

template<typename T>
T get_safe_param(const dpp::slashcommand_t& event, const std::string& name) {
    try {
        return std::get<T>(event.get_parameter(name));
    }
    catch (const std::bad_variant_access&) {
        throw std::runtime_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è '" + name + "'");
    }
}

int main() {
    init_console();
    Config cfg = get_config();

    dpp::cluster bot(cfg.bot_token);
    bot.on_log(dpp::utility::cout_logger());

    bot.on_slashcommand([&bot, &cfg](const dpp::slashcommand_t& event) {
        if (event.command.get_command_name() == "mita") {
            event.thinking(false);

            try {
                std::string question = get_safe_param<std::string>(event, "question");
                std::string answer = ask_gemini(question, cfg.gemini_key);

                dpp::embed embed = dpp::embed()
                    .set_color(0xFFC0CB)  // –ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π —Ü–≤–µ—Ç
                    .set_title(u8"üíÅ‚Äç‚ôÄÔ∏è –û—Ç–≤–µ—Ç –ú–∏—Ç—ã")
                    .set_description(answer.empty() ?
                        u8"–ü—Ä–æ—Å—Ç–∏, –º–∏–ª—ã–π, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –≤–æ–ø—Ä–æ—Å... –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å? üí≠" :
                        answer.substr(0, 2000))
                    .set_footer(dpp::embed_footer()
                        .set_text(u8"–°–ø—Ä–æ—Å–∏–ª(–∞): " + event.command.usr.username)
                        .set_icon(event.command.usr.get_avatar_url()))
                    .set_thumbnail("https://i.imgur.com/JJxSJ5s.png");  // –ñ–µ–Ω—Å–∫–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞

                event.edit_response(dpp::message().add_embed(embed));
            }
            catch (const std::exception& e) {
                std::cerr << "[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: " << e.what() << std::endl;
                event.edit_response(u8"–û–π-–æ–π! –ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ª–∞–¥–Ω–æ? üíï");
            }
        }
        });

    bot.on_ready([&bot, &cfg](const dpp::ready_t& event) {
        if (dpp::run_once<struct register_commands>()) {
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
            bot.guild_commands_get(cfg.guild_id, [&bot, cfg](const dpp::confirmation_callback_t& callback) {
                if (callback.is_error()) {
                    std::cerr << "[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: " << callback.get_error().message << std::endl;
                    return;
                }

                auto commands = std::get<dpp::slashcommand_map>(callback.value);
                for (auto& cmd : commands) {
                    if (cmd.second.name == "ask") {
                        bot.guild_command_delete(cmd.second.id, cfg.guild_id);
                    }
                }
                });

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            dpp::slashcommand mita_cmd("mita", u8"–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ú–∏—Ç–µ - —Ç–≤–æ–µ–º—É –∂–µ–Ω—Å–∫–æ–º—É AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É", bot.me.id);
            mita_cmd.add_option(
                dpp::command_option(dpp::co_string, "question", u8"–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –ú–∏—Ç—ã?", true)
                .set_max_length(500)
            );

            bot.guild_command_create(mita_cmd, cfg.guild_id);

            std::cout << u8"–ú–∏—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /mita\n";

            bot.set_presence(dpp::presence(
                dpp::ps_online,
                dpp::at_listening,
                u8"–≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã | /mita üíñ"
            ));
        }
        });

    try {
        bot.start(dpp::st_wait);
    }
    catch (const std::exception& e) {
        std::cerr << "[–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
/*
#include <dpp/dpp.h>
#include <string>
#include <iostream>
#include <json.hpp>
#include <curl/curl.h>
#include <windows.h>
#include <algorithm>
#include <cctype>

using json = nlohmann::json;

struct Config {
    std::string bot_token;
    std::string gemini_key;
    dpp::snowflake guild_id;
};

void init_console() {
#ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
    SetConsoleCP(CP_UTF8);
#else
    setlocale(LC_ALL, "en_US.UTF-8");
#endif
}

std::string get_input(const std::string& prompt, bool sensitive = false) {
    std::string input;
    std::cout << prompt;

    if (sensitive) {
#ifdef _WIN32
        HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
        DWORD mode;
        GetConsoleMode(hStdin, &mode);
        SetConsoleMode(hStdin, mode & ~ENABLE_ECHO_INPUT);
        std::getline(std::cin, input);
        SetConsoleMode(hStdin, mode);
        std::cout << "\n";
#else
        system("stty -echo");
        std::getline(std::cin, input);
        system("stty echo");
        std::cout << "\n";
#endif
    }
    else {
        std::getline(std::cin, input);
    }

    return input;
}

size_t write_callback(char* ptr, size_t size, size_t nmemb, std::string* data) {
    data->append(ptr, size * nmemb);
    return size * nmemb;
}

std::string ask_gemini(const std::string& prompt, const std::string& api_key) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    std::string lower_prompt = prompt;
    std::transform(lower_prompt.begin(), lower_prompt.end(), lower_prompt.begin(), ::tolower);

    if (lower_prompt.find("–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª") != std::string::npos ||
        lower_prompt.find("–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å") != std::string::npos ||
        lower_prompt.find("–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª") != std::string::npos ||
        lower_prompt.find("who created you") != std::string::npos ||
        lower_prompt.find("who made you") != std::string::npos) {
        return "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª VoronIdZe-VisualStudio! –û–Ω –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å.";
    }

    CURL* curl = curl_easy_init();
    std::string response;
    std::string error_msg = "I apologize, but I couldn't process your request. Please try again later.";

    if (!curl) {
        std::cerr << "CURL initialization failed" << std::endl;
        return error_msg;
    }

    // Sanitize input
    std::string sanitized_prompt = prompt;
    sanitized_prompt.erase(std::remove_if(sanitized_prompt.begin(), sanitized_prompt.end(),
        [](char c) { return std::iscntrl(c); }), sanitized_prompt.end());

    // Create a more personalized prompt for the AI
    std::string personalized_prompt = "You are Mita, a helpful and friendly AI assistant. "
        "Respond in a polite, professional but warm female tone. "
        "Keep answers concise yet detailed enough to be helpful. "
        "If you don't know something, say so honestly. "
        "Here's the user's question: " + sanitized_prompt;

    json request = {
        {"contents", {
            {
                {"parts", {
                    {{"text", personalized_prompt}}
                }}
            }
        }},
        {"generationConfig", {
            {"temperature", 0.7},
            {"maxOutputTokens", 500}
        }}
    };

    std::string json_payload;
    try {
        json_payload = request.dump();
        // Validate JSON
        auto test = json::parse(json_payload);
    }
    catch (const std::exception& e) {
        std::cerr << "JSON error: " << e.what() << std::endl;
        return error_msg;
    }

    struct curl_slist* headers = nullptr;
    headers = curl_slist_append(headers, "Content-Type: application/json");
    headers = curl_slist_append(headers, "Accept: application/json");

    std::string url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + api_key;

    // Debug output
    std::cout << "Sending to Gemini API:\nURL: " << url << "\nPayload: " << json_payload << std::endl;

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
    curl_easy_setopt(curl, CURLOPT_POST, 1L);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, json_payload.c_str());
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, json_payload.size());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 30L);

    CURLcode res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        std::cerr << "Gemini API error: " << curl_easy_strerror(res) << std::endl;
        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
        return error_msg;
    }

    long http_code = 0;
    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
    curl_slist_free_all(headers);
    curl_easy_cleanup(curl);

    if (http_code != 200) {
        std::cerr << "Gemini API returned HTTP " << http_code << ": " << response << std::endl;
        if (http_code == 400) return "I'm sorry, that request wasn't properly formatted.";
        if (http_code == 429) return "I'm getting too many requests right now. Please wait a moment.";
        if (http_code == 404) return "I'm having trouble accessing my knowledge base at the moment.";
        return error_msg;
    }

    try {
        auto json_response = json::parse(response);
        if (json_response.contains("candidates") &&
            !json_response["candidates"].empty() &&
            json_response["candidates"][0].contains("content") &&
            json_response["candidates"][0]["content"].contains("parts") &&
            !json_response["candidates"][0]["content"]["parts"].empty()) {
            return json_response["candidates"][0]["content"]["parts"][0]["text"].get<std::string>();
        }
    }
    catch (const std::exception& e) {
        std::cerr << "JSON parsing error: " << e.what() << std::endl;
    }

    return error_msg;
}

Config get_config() {
    Config cfg;

    do {
        cfg.bot_token = get_input("Enter Discord bot token: ", true);
    } while (cfg.bot_token.empty());

    do {
        cfg.gemini_key = get_input("Enter Gemini API key (AIzaSy...): ", true);
    } while (cfg.gemini_key.empty());

    std::string guild_id_str;
    do {
        guild_id_str = get_input("Enter guild ID: ");
        try {
            cfg.guild_id = dpp::snowflake(std::stoull(guild_id_str));
        }
        catch (...) {
            continue;
        }
    } while (cfg.guild_id == 0);

    return cfg;
}

template<typename T>
T get_safe_param(const dpp::slashcommand_t& event, const std::string& name) {
    try {
        return std::get<T>(event.get_parameter(name));
    }
    catch (const std::bad_variant_access&) {
        throw std::runtime_error("Invalid parameter type for '" + name + "'");
    }
}

int main() {
    init_console();
    Config cfg = get_config();

    dpp::cluster bot(cfg.bot_token);
    bot.on_log(dpp::utility::cout_logger());

    bot.on_slashcommand([&bot, &cfg](const dpp::slashcommand_t& event) {
        if (event.command.get_command_name() == "mita") {
            event.thinking(false);

            try {
                std::string question = get_safe_param<std::string>(event, "question");
                std::string answer = ask_gemini(question, cfg.gemini_key);

                dpp::embed embed = dpp::embed()
                    .set_color(0xFF69B4)
                    .set_title("Mita's Response")
                    .set_description(answer.empty() ?
                        "I didnt undestand, dear, try ask" :
                        answer.substr(0, 2000))
                    .set_footer(dpp::embed_footer()
                        .set_text("Asked by " + event.command.usr.username)
                        .set_icon(event.command.usr.get_avatar_url()));
                       
                  

                event.edit_response(dpp::message().add_embed(embed));
            }
            catch (const std::exception& e) {
                std::cerr << "Command processing error: " << e.what() << std::endl;
                event.edit_response("I encountered an error while processing your request. Please try again.");
            }
        }
        });

    bot.on_ready([&bot, &cfg](const dpp::ready_t& event) {
        if (dpp::run_once<struct register_commands>()) {
            // First delete old commands if they exist
            bot.guild_commands_get(cfg.guild_id, [&bot, cfg](const dpp::confirmation_callback_t& callback) {
                if (callback.is_error()) {
                    std::cerr << "Failed to get commands: " << callback.get_error().message << std::endl;
                    return;
                }

                auto commands = std::get<dpp::slashcommand_map>(callback.value);
                for (auto& cmd : commands) {
                    if (cmd.second.name == "ask") {  // Delete old /ask command
                        bot.guild_command_delete(cmd.second.id, cfg.guild_id, [](const dpp::confirmation_callback_t& cb) {
                            if (cb.is_error()) {
                                std::cerr << "Failed to delete command: " << cb.get_error().message << std::endl;
                            }
                            });
                    }
                }
                });

            // Register new /mita command
            dpp::slashcommand mita_cmd("mita", "Ask Mita anything you'd like to know", bot.me.id);
            mita_cmd.add_option(
                dpp::command_option(dpp::co_string, "question", "What would you like to ask Mita?", true)
                .set_max_length(500)
            );

            bot.guild_command_create(mita_cmd, cfg.guild_id, [](const auto& cb) {
                if (cb.is_error()) {
                    std::cerr << "Failed to register command: "
                        << cb.get_error().message << std::endl;
                }
                });

            std::cout << "Mita AI is now online and ready to assist!\n";

            bot.set_presence(dpp::presence(
                dpp::ps_online,
                dpp::at_watching,
                "your questions | /mita"
            ));
        }
        });

    try {
        bot.start(dpp::st_wait);
    }
    catch (const std::exception& e) {
        std::cerr << "Bot startup failed: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}     
------------------------------------- */ 



/* -----------------------------------
#include <dpp/dpp.h>
#include <json.hpp>
#include <iostream>
#include <string>
#include <cstdlib>
#include <curl/curl.h>
#include <windows.h> // –î–ª—è SetConsoleCP –Ω–∞ Windows

// Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
size_t write_callback(char* ptr, size_t size, size_t nmemb, std::string* data) {
    data->append(ptr, size * nmemb);
    return size * nmemb;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ OpenAI
bool is_valid_openai_token(const std::string& token) {
    return token.length() >= 32 && token.substr(0, 3) == "sk-";
}

std::string get_openai_response(const std::string& prompt, const std::string& api_key) {
    if (!is_valid_openai_token(api_key)) {
        return "‚ö† –û—à–∏–±–∫–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω OpenAI";
    }

    CURL* curl = curl_easy_init();
    if (!curl) {
        std::cerr << "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CURL" << std::endl;
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API";
    }

    std::string response_string;
    nlohmann::json request_body = {
        {"model", "gpt-3.5-turbo-instruct"},
        {"prompt", prompt},
        {"max_tokens", 150},
        {"temperature", 0.7}
    };

    struct curl_slist* headers = NULL;
    headers = curl_slist_append(headers, ("Authorization: Bearer " + api_key).c_str());
    headers = curl_slist_append(headers, "Content-Type: application/json");

    curl_easy_setopt(curl, CURLOPT_URL, "https://api.openai.com/v1/completions");
    curl_easy_setopt(curl, CURLOPT_POST, 1L);
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, request_body.dump().c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_string);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10L); // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

    CURLcode res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        std::cerr << "–û—à–∏–±–∫–∞ CURL: " << curl_easy_strerror(res) << std::endl;
        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API";
    }

    long http_code = 0;
    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
    curl_easy_cleanup(curl);
    curl_slist_free_all(headers);

    if (http_code != 200) {
        std::cerr << "–û—à–∏–±–∫–∞ API: HTTP " << http_code << "\n–û—Ç–≤–µ—Ç: " << response_string << std::endl;
        return "–û—à–∏–±–∫–∞ API OpenAI";
    }

    try {
        auto response_json = nlohmann::json::parse(response_string);
        return response_json["choices"][0]["text"].get<std::string>();
    }
    catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: " << e.what() << "\n–û—Ç–≤–µ—Ç: " << response_string << std::endl;
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞";
    }
}

std::string get_input(const std::string& prompt, bool sensitive = false) {
    std::string input;
    std::cout << prompt;

    if (sensitive) {
#ifdef _WIN32
        HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
        DWORD mode;
        GetConsoleMode(hStdin, &mode);
        SetConsoleMode(hStdin, mode & ~ENABLE_ECHO_INPUT);
        std::getline(std::cin, input);
        SetConsoleMode(hStdin, mode);
        std::cout << "\n";
#else
        system("stty -echo");
        std::getline(std::cin, input);
        system("stty echo");
        std::cout << "\n";
#endif
    }
    else {
        std::getline(std::cin, input);
    }

    return input;
}

int main() {
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows  
    SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è libcurl
    curl_global_init(CURL_GLOBAL_DEFAULT);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    std::string bot_token, openai_key;

    do {
        bot_token = get_input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Discord –±–æ—Ç–∞: ", true);
        if (bot_token.empty()) {
            std::cerr << "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n";
        }
    } while (bot_token.empty());

    do {
        openai_key = get_input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω OpenAI (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-): ", true);
        if (!is_valid_openai_token(openai_key)) {
            std::cerr << "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-' –∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤!\n";
        }
    } while (!is_valid_openai_token(openai_key));

    dpp::cluster bot(bot_token);
    bot.on_log(dpp::utility::cout_logger());

    bot.on_ready([&bot](const dpp::ready_t& event) {
        std::cout << "–ë–æ—Ç " << bot.me.username << " –∑–∞–ø—É—â–µ–Ω!\n";

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /ask
        dpp::slashcommand cmd("ask", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", bot.me.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞
        cmd.add_option(
            dpp::command_option(dpp::co_string, "question", "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", true)
        );

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        bot.global_command_create(cmd, [](const dpp::confirmation_callback_t& cb) {
            if (cb.is_error()) {
                auto err = cb.get_error();
                std::cerr << "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                    << "–ö–æ–¥: " << err.code << "\n"
                    << "–°–æ–æ–±—â–µ–Ω–∏–µ: " << err.message << "\n";

                if (!err.errors.empty()) {
                    std::cerr << "–î–µ—Ç–∞–ª–∏: " << err.message << "\n";
                }
            }
            else {
                std::cout << "–ö–æ–º–∞–Ω–¥–∞ /ask —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n";
            }
            });
        });

    bot.on_slashcommand([&bot, &openai_key](const dpp::slashcommand_t& event) {
        if (event.command.get_command_name() == "ask") {
            event.thinking(false);

            try {
                std::string question = std::get<std::string>(event.get_parameter("question"));
                std::string response = get_openai_response(question, openai_key);
                event.edit_response(dpp::message(response).set_allowed_mentions(false));
            }
            catch (const std::exception& e) {
                std::cerr << "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: " << e.what() << "\n";
                event.edit_response("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
            }
        }
        });

    bot.start(dpp::st_wait);
    curl_global_cleanup();
    return 0;
}

*/





